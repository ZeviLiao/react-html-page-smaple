{"version":3,"sources":["components/calendar/demo-data/appointments.js","components/calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["appointments","startDate","endDate","title","style","theme","todayCell","backgroundColor","fade","palette","primary","main","weekendCell","action","disabledBackground","today","weekend","TimeTableCell","withStyles","name","classes","restProps","date","Date","getDate","className","getDay","Appointment","children","data","borderRadius","todayLocalizationMessages","getTodayMessages","locale","DayScaleCell","Demo","props","state","this","Paper","height","startDayHour","endDayHour","timeTableCellComponent","dayScaleCellComponent","cellDuration","messages","appointmentComponent","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84c34b20.chunk.js","sourcesContent":["export const appointments = [\n  {\n    startDate: '2020-02-16T09:10:00',\n    endDate: '2020-02-16T10:10:00',\n    title: 'Meeting',\n  },\n  {\n    startDate: '2020-02-16T11:10:00',\n    endDate: '2020-02-16T12:10:00',\n    title: 'Go to a gym',\n  },\n]\n","import * as React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport { ViewState } from '@devexpress/dx-react-scheduler'\nimport {\n  Scheduler,\n  WeekView,\n  Toolbar,\n  DateNavigator,\n  Appointments,\n  TodayButton,\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport { withStyles } from '@material-ui/core/styles'\nimport { fade } from '@material-ui/core/styles/colorManipulator'\nimport { appointments } from './demo-data/appointments'\n// import getQueryVariable from './getQueryVariable'\n\nconst style = theme => ({\n  todayCell: {\n    backgroundColor: fade(theme.palette.primary.main, 0.1),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.primary.main, 0.14),\n    },\n    '&:focus': {\n      backgroundColor: fade(theme.palette.primary.main, 0.16),\n    },\n  },\n  weekendCell: {\n    backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\n    },\n    '&:focus': {\n      backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\n    },\n  },\n  today: {\n    backgroundColor: fade(theme.palette.primary.main, 0.16),\n  },\n  weekend: {\n    backgroundColor: fade(theme.palette.action.disabledBackground, 0.06),\n  },\n})\n\nconst TimeTableCellBase = ({ classes, ...restProps }) => {\n  const { startDate } = restProps\n  const date = new Date(startDate)\n  if (date.getDate() === new Date().getDate()) {\n    return (\n      <WeekView.TimeTableCell {...restProps} className={classes.todayCell} />\n    )\n  }\n  if (date.getDay() === 0 || date.getDay() === 6) {\n    return (\n      <WeekView.TimeTableCell {...restProps} className={classes.weekendCell} />\n    )\n  }\n  return <WeekView.TimeTableCell {...restProps} />\n}\n\nconst TimeTableCell = withStyles(style, { name: 'TimeTableCell' })(\n  TimeTableCellBase\n)\n\nconst Appointment = ({ children, style, data, ...restProps }) => (\n  <Appointments.Appointment\n    {...restProps}\n    style={{\n      ...style,\n      backgroundColor: data.title === 'Meeting' ? 'lightGray' : 'blue',\n      borderRadius: '8px',\n    }}\n  >\n    {children}\n  </Appointments.Appointment>\n)\n\nconst todayLocalizationMessages = {\n  'zh-TW': {\n    today: '今天',\n  },\n}\n\nconst DayScaleCellBase = ({ classes, ...restProps }) => {\n  const { startDate, today } = restProps\n  if (today) {\n    return <WeekView.DayScaleCell {...restProps} className={classes.today} />\n  }\n  if (startDate.getDay() === 0 || startDate.getDay() === 6) {\n    return <WeekView.DayScaleCell {...restProps} className={classes.weekend} />\n  }\n  return <WeekView.DayScaleCell {...restProps} />\n}\nconst getTodayMessages = locale => todayLocalizationMessages[locale]\nconst DayScaleCell = withStyles(style, { name: 'DayScaleCell' })(\n  DayScaleCellBase\n)\n\nexport default class Demo extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: appointments,\n      locale: 'en-US', //'zh-TW',\n    }\n  }\n\n  render() {\n    const { data, locale } = this.state\n\n    return (\n      <Paper>\n        <Scheduler data={data} height={660} locale={locale}>\n          <ViewState />\n          <WeekView\n            startDayHour={8}\n            endDayHour={22}\n            timeTableCellComponent={TimeTableCell}\n            dayScaleCellComponent={DayScaleCell}\n            cellDuration={60}\n          />\n          <Toolbar />\n          <DateNavigator />\n          <TodayButton messages={getTodayMessages(locale)} />\n          <Appointments appointmentComponent={Appointment} />\n        </Scheduler>\n      </Paper>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Calendar from './components/calendar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}